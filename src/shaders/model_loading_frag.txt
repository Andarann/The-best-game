#version 330 core
out vec4 FragColor;

in vec3 Normal;
in vec3 FragPos;
in vec2 TexCoords;

struct Material{
	sampler2D texture_diffuse1;
	sampler2D texture_normal1;
	sampler2D texture_specular1;
	float shininess;
};

uniform Material material;

uniform vec3 lightPos;
uniform vec3 viewPos;

void main()
{           
	vec3 lightDir = normalize(lightPos - FragPos);
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 norm = normalize(Normal);
	
    vec3 ambient = vec3(0.1f, 0.1f, 0.1f) * vec3(texture(material.texture_diffuse1, TexCoords));
	
	float diff = max(dot(lightDir , norm), 0.0);
	vec3 diffuse = vec3(1.0f, 1.0f, 1.0f) * diff * vec3(texture(material.texture_diffuse1, TexCoords));
	
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0f);
	vec3 specular = vec3(1.0f, 1.0f, 1.0f) * spec * vec3(texture(material.texture_specular1, TexCoords));
	
	float distance = length(FragPos - lightPos);
	float attenuation = 1.0f / (1.0f + 0.09f * distance + 0.032f * distance * distance);
	
	vec3 result = attenuation * ( ambient + specular + diffuse );
	
	FragColor = vec4(result, 1.0);
}